namespace Bootsharp.Publish;

internal class InteropMarshaller
{
    private readonly Dictionary<string, string> generatedByName = [];

    public string Marshal (Type type)
    {
        if (GetTypeId(type) is not { } typeId) return "";
        var methodName = $"Marshal_{typeId}";
        if (generatedByName.ContainsKey(methodName)) return methodName;
        generatedByName[methodName] = GenerateMarshalMethod(methodName, type);
        return methodName;
    }

    public string Unmarshal (Type type)
    {
        if (GetTypeId(type) is not { } typeId) return "";
        var methodName = $"Unmarshal_{typeId}";
        if (generatedByName.ContainsKey(methodName)) return methodName;
        generatedByName[methodName] = GenerateUnmarshalMethod(methodName, type);
        return methodName;
    }

    public IReadOnlyCollection<string> GetGenerated () => generatedByName.Values;

    private string? GetTypeId (Type type)
    {
        if (IsTaskWithResult(type, out var resultType))
            type = resultType;
        if (type.IsArray && !ShouldMarshall(type.GetElementType()!))
            return null; // https://github.com/elringus/bootsharp/issues/138
        return BuildSyntax(type)
            .Replace('.', '_').Replace('+', '_')
            .Replace("<", "_").Replace(">", "").Replace(",", "_")
            .Replace("[", "_Array").Replace("]", "")
            .Replace("global::", "").Replace(" ", "");
    }

    private string GenerateMarshalMethod (string name, Type type)
    {
        return "";
    }

    private string GenerateUnmarshalMethod (string name, Type type)
    {
        return "";
    }

    private static string GenerateCommon () =>
        """
        private static readonly List<object> list = [];

        private static object MarshalList (object obj)
        {
            list.Clear();
        
            // Have to resort to enumerable here, because buffer types
            // generated by collection expressions can't be casted to non-generic
            // IList or ICollection, while casting to IReadOnlyCollection<object>
            // won't work for collections where element is of a value type.
        
            foreach (var element in (System.Collections.IEnumerable)obj)
                list.Add(element);
        
            return list.ToArray();
        }

        private static object MarshalDictionary (object obj)
        {
            var dict = (System.Collections.IDictionary)obj;
            var raw = new object[dict.Count];
            var idx = 0;
        
            foreach (System.Collections.DictionaryEntry entry in dict)
            {
                raw[idx++] = entry.Key;
                raw[idx++] = entry.Value;
            }
        
            return raw;
        }
        """;
}
